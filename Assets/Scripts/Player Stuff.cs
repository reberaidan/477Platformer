//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.0
//     from Assets/Scripts/Player Stuff.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerStuff: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerStuff()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player Stuff"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""b584f6c5-d2a1-4ac5-9130-9c9629c44dd4"",
            ""actions"": [
                {
                    ""name"": ""move"",
                    ""type"": ""Value"",
                    ""id"": ""46bb4ab6-9f04-4c03-b157-f5b0e79f938a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""jump"",
                    ""type"": ""PassThrough"",
                    ""id"": ""e6011f25-4b7c-412b-8264-eaac3ab27615"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""crouch"",
                    ""type"": ""PassThrough"",
                    ""id"": ""235a4950-7732-4e56-8a15-a84464451666"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""flutter"",
                    ""type"": ""Button"",
                    ""id"": ""d55bf222-82c8-4faa-b546-56856c3dcb61"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""MultiTap(tapDelay=1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""sjump"",
                    ""type"": ""Button"",
                    ""id"": ""0c73eda5-e43f-4008-9a66-4be597957204"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""slam"",
                    ""type"": ""Button"",
                    ""id"": ""e7c958c9-df2d-4029-be02-877ec6f84101"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""horizontal"",
                    ""id"": ""515ef923-8481-479d-b977-54ea4d6790a8"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Negative"",
                    ""id"": ""a4dc3af5-3923-4cb9-8506-05cf0df03042"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Positive"",
                    ""id"": ""a169b470-072f-4e7e-9a3a-551c0e626534"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""3dff2e1d-fb66-42f9-8a37-2de07b092784"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a6ed735e-3cab-4825-ba82-fa5b8877713f"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6eb7f1a8-3877-401b-af89-31fb232711fa"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": ""Hold(duration=0.6)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""flutter"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""902c720c-7b3b-4db5-89f7-f43f7c90b95a"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""sjump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9d964115-8ab5-4ff8-a27a-a1cf0ca18650"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""slam"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_move = m_Player.FindAction("move", throwIfNotFound: true);
        m_Player_jump = m_Player.FindAction("jump", throwIfNotFound: true);
        m_Player_crouch = m_Player.FindAction("crouch", throwIfNotFound: true);
        m_Player_flutter = m_Player.FindAction("flutter", throwIfNotFound: true);
        m_Player_sjump = m_Player.FindAction("sjump", throwIfNotFound: true);
        m_Player_slam = m_Player.FindAction("slam", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_move;
    private readonly InputAction m_Player_jump;
    private readonly InputAction m_Player_crouch;
    private readonly InputAction m_Player_flutter;
    private readonly InputAction m_Player_sjump;
    private readonly InputAction m_Player_slam;
    public struct PlayerActions
    {
        private @PlayerStuff m_Wrapper;
        public PlayerActions(@PlayerStuff wrapper) { m_Wrapper = wrapper; }
        public InputAction @move => m_Wrapper.m_Player_move;
        public InputAction @jump => m_Wrapper.m_Player_jump;
        public InputAction @crouch => m_Wrapper.m_Player_crouch;
        public InputAction @flutter => m_Wrapper.m_Player_flutter;
        public InputAction @sjump => m_Wrapper.m_Player_sjump;
        public InputAction @slam => m_Wrapper.m_Player_slam;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @move.started += instance.OnMove;
            @move.performed += instance.OnMove;
            @move.canceled += instance.OnMove;
            @jump.started += instance.OnJump;
            @jump.performed += instance.OnJump;
            @jump.canceled += instance.OnJump;
            @crouch.started += instance.OnCrouch;
            @crouch.performed += instance.OnCrouch;
            @crouch.canceled += instance.OnCrouch;
            @flutter.started += instance.OnFlutter;
            @flutter.performed += instance.OnFlutter;
            @flutter.canceled += instance.OnFlutter;
            @sjump.started += instance.OnSjump;
            @sjump.performed += instance.OnSjump;
            @sjump.canceled += instance.OnSjump;
            @slam.started += instance.OnSlam;
            @slam.performed += instance.OnSlam;
            @slam.canceled += instance.OnSlam;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @move.started -= instance.OnMove;
            @move.performed -= instance.OnMove;
            @move.canceled -= instance.OnMove;
            @jump.started -= instance.OnJump;
            @jump.performed -= instance.OnJump;
            @jump.canceled -= instance.OnJump;
            @crouch.started -= instance.OnCrouch;
            @crouch.performed -= instance.OnCrouch;
            @crouch.canceled -= instance.OnCrouch;
            @flutter.started -= instance.OnFlutter;
            @flutter.performed -= instance.OnFlutter;
            @flutter.canceled -= instance.OnFlutter;
            @sjump.started -= instance.OnSjump;
            @sjump.performed -= instance.OnSjump;
            @sjump.canceled -= instance.OnSjump;
            @slam.started -= instance.OnSlam;
            @slam.performed -= instance.OnSlam;
            @slam.canceled -= instance.OnSlam;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    public interface IPlayerActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnCrouch(InputAction.CallbackContext context);
        void OnFlutter(InputAction.CallbackContext context);
        void OnSjump(InputAction.CallbackContext context);
        void OnSlam(InputAction.CallbackContext context);
    }
}
